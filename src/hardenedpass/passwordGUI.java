package hardenedpass;

import hardenedpass.AES;
import hardenedpass.KeyedHash;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.SignatureException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.commons.io.FileUtils;

import sun.misc.BASE64Decoder;

public class passwordGUI extends javax.swing.JFrame {

    private char[] givenPass;
    private String givenUser;
    private String givenQ1;
    private String givenQ2;
    private String givenQ3;
    private String givenQ4;
    private String givenQ5;
    private File histFile;
    private File instructFile;
    //these are the thresholds for each of the questions
    //set by us to whatever
    private int q1Thresh;
    private int q2Thresh;
    private int q3Thresh;
    private int q4Thresh;
    private int q5Thresh;
    private BigInteger prime;
    private int m = 5; // No of features

    public passwordGUI() {
        initComponents();
        questionsPanel.setVisible(false);
        successPanel.setVisible(false);
        failPanel.setVisible(false);
        BufferedReader read;
        try {
            read = new BufferedReader(new FileReader("systemSettings.txt"));
            prime = new BigInteger(read.readLine());
            q1Thresh = Integer.parseInt(read.readLine());
            q2Thresh = Integer.parseInt(read.readLine());
            q3Thresh = Integer.parseInt(read.readLine());
            q4Thresh = Integer.parseInt(read.readLine());
            q5Thresh = Integer.parseInt(read.readLine());
        } catch (IOException ex) {
            Logger.getLogger(passwordGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        loginPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        usernameTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        questionsPanel = new javax.swing.JPanel();
        campusTextField = new javax.swing.JTextField();
        sessionTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        exerciseTextField = new javax.swing.JTextField();
        facebookTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        questionsButton = new javax.swing.JButton();
        successPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        failPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hardend Password");
        setBounds(new java.awt.Rectangle(500, 200, 0, 0));
        setMinimumSize(new java.awt.Dimension(400, 400));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        loginPanel.setMinimumSize(new java.awt.Dimension(117, 300));
        loginPanel.setLayout(new java.awt.GridBagLayout());

        jLabel8.setText("Username:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        loginPanel.add(jLabel8, gridBagConstraints);

        jLabel9.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        loginPanel.add(jLabel9, gridBagConstraints);

        loginButton.setText("Submit");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        loginPanel.add(loginButton, gridBagConstraints);

        usernameTextField.setMinimumSize(new java.awt.Dimension(6, 25));
        usernameTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        loginPanel.add(usernameTextField, gridBagConstraints);

        passwordTextField.setMinimumSize(new java.awt.Dimension(6, 25));
        passwordTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        loginPanel.add(passwordTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(loginPanel, gridBagConstraints);

        questionsPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        questionsPanel.add(campusTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        questionsPanel.add(sessionTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        questionsPanel.add(emailTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        questionsPanel.add(exerciseTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        questionsPanel.add(facebookTextField, gridBagConstraints);

        jLabel10.setText("How long is your expected session (mins)?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        questionsPanel.add(jLabel10, gridBagConstraints);

        jLabel11.setText("How far are you from campus (miles)?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        questionsPanel.add(jLabel11, gridBagConstraints);

        jLabel12.setText("How many emails do you expect to send?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        questionsPanel.add(jLabel12, gridBagConstraints);

        jLabel1.setText("How long did you exercise today (mins)?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        questionsPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setText("How long were you on Facebook yesterday (mins)?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        questionsPanel.add(jLabel2, gridBagConstraints);

        questionsButton.setText("Submit");
        questionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        questionsPanel.add(questionsButton, gridBagConstraints);

        getContentPane().add(questionsPanel, new java.awt.GridBagConstraints());

        successPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Successful Login");
        successPanel.add(jLabel3, new java.awt.GridBagConstraints());

        getContentPane().add(successPanel, new java.awt.GridBagConstraints());

        failPanel.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Failed Login");
        failPanel.add(jLabel4, new java.awt.GridBagConstraints());

        getContentPane().add(failPanel, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        if (!usernameTextField.getText().equals("") && passwordTextField.getPassword().length != 0) {
            //do initialization here if it is new user.
            //don't ask for next questions if it is new user
            givenPass = passwordTextField.getPassword();
            givenUser = usernameTextField.getText();

            //check to see if it is a new user
            //hash(username_history).txt
            //hash(username_instruction).txt
            try {
                MessageDigest md1 = MessageDigest.getInstance("MD5");
                MessageDigest md2 = MessageDigest.getInstance("MD5");
                String histFileName = givenUser + "_history";
                String instructionFileName = givenUser + "_instruction";

                byte[] messageDigest1 = md1.digest(histFileName.getBytes());
                byte[] messageDigest2 = md2.digest(instructionFileName.getBytes());
                BigInteger numberHist = new BigInteger(1, messageDigest1);
                BigInteger numberInstruct = new BigInteger(1, messageDigest2);

                String histFileHash = numberHist.toString(16);
                String instructionFileHash = numberInstruct.toString(16);
                histFile = new File(histFileHash + ".txt");
                instructFile = new File(instructionFileHash + ".txt");
                //System.out.println("hist: " + histFile); //debug line
                //System.out.println("inst: " + instructFile); //debug line

                if (histFile.exists() && instructFile.exists()) {
                    loginPanel.setVisible(false);
                    questionsPanel.setVisible(true);
                } else {
                    //do the initialization
                    initialization(histFile, instructFile);
                }
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(passwordGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void questionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionsButtonActionPerformed
        try {
            BigInteger f1, f2, f3, f4, f5;
            BigInteger coords[][] = new BigInteger[5][2];
            int count = 1;


            String instructions[][] = new String[5][];
            String encFileContent = FileUtils.readFileToString(instructFile);

            System.out.println("Encrypted File Content : " + encFileContent);
            String password = new String(passwordTextField.getPassword());
            MessageDigest mdInstn = MessageDigest.getInstance("SHA-256");
            mdInstn.update(password.getBytes());
            byte[] aesInstnKey = mdInstn.digest();
            String fileContent = AES.decrypt(encFileContent, aesInstnKey);
            System.out.println("File Content : " + fileContent);

            String[] fileContentLines = fileContent.split("\n");

            for (int i = 0; i < 5; i++) {
                instructions[i] = fileContentLines[i].split(",");
            }

            givenQ1 = campusTextField.getText();
            givenQ2 = sessionTextField.getText();
            givenQ3 = emailTextField.getText();
            givenQ4 = exerciseTextField.getText();
            givenQ5 = facebookTextField.getText();
            
            //if the user doesn't enter anything for the question replace with 0
            if(givenQ1.equals("")){
                givenQ1 = "0";
            }
            if(givenQ2.equals("")){
                givenQ2 = "0";
            }
            if(givenQ3.equals("")){
                givenQ3 = "0";
            }
            if(givenQ4.equals("")){
                givenQ4 = "0";
            }
            if(givenQ5.equals("")){
                givenQ5 = "0";
            }

            //this will set the feature values to either alpha or beta
            if (Integer.parseInt(givenQ1) < q1Thresh) {
                f1 = new BigInteger(instructions[0][1]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count);
                coords[count - 1][1] = calcYCoord(f1, 'a', count);
                count++;
            } else {
                f1 = new BigInteger(instructions[0][2]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count + 1);
                coords[count - 1][1] = calcYCoord(f1, 'b', count);
                count++;
            }
            // System.out.println("coords[0]:  " + Arrays.toString(coords[0]));//debug line
            if (Integer.parseInt(givenQ2) < q2Thresh) {
                f2 = new BigInteger(instructions[1][1]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count);
                coords[count - 1][1] = calcYCoord(f2, 'a', count);
                count++;
            } else {
                f2 = new BigInteger(instructions[1][2]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count + 1);
                coords[count - 1][1] = calcYCoord(f2, 'b', count);
                count++;
            }
            //  System.out.println("coords[1]:  " + Arrays.toString(coords[1]));//debug line
            if (Integer.parseInt(givenQ3) < q3Thresh) {
                f3 = new BigInteger(instructions[2][1]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count);
                coords[count - 1][1] = calcYCoord(f3, 'a', count);
                count++;
            } else {
                f3 = new BigInteger(instructions[2][2]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count + 1);
                coords[count - 1][1] = calcYCoord(f3, 'b', count);
                count++;
            }
            // System.out.println("coords[2]:  " + Arrays.toString(coords[2]));//debug line
            if (Integer.parseInt(givenQ4) < q4Thresh) {
                f4 = new BigInteger(instructions[3][1]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count);
                coords[count - 1][1] = calcYCoord(f4, 'a', count);
                count++;
            } else {
                f4 = new BigInteger(instructions[3][2]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count + 1);
                coords[count - 1][1] = calcYCoord(f4, 'b', count);
                count++;
            }
            // System.out.println("coords[3]:  " + Arrays.toString(coords[3]));//debug line
            if (Integer.parseInt(givenQ5) < q5Thresh) {
                f5 = new BigInteger(instructions[4][1]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count);
                coords[count - 1][1] = calcYCoord(f5, 'a', count);
                count++;
            } else {
                f5 = new BigInteger(instructions[4][2]);
                coords[count - 1][0] = BigInteger.valueOf(2 * count + 1);
                coords[count - 1][1] = calcYCoord(f5, 'b', count);
                count++;
            }
            //    System.out.println("coords[4]:  " + Arrays.toString(coords[4]));//debug line

            //the following recovers Hpw
            BigInteger hpwdd = BigInteger.ZERO;
            BigInteger in, num, den;
            for (int i = 1; i <= m; i++) {
                num = BigInteger.ONE;
                den = BigInteger.ONE;

                //this for loop calculates lambda values
                for (int j = 1; j <= m; j++) {
                    if (i != j) {
                        BigInteger Xj = coords[j - 1][0];
                        num = num.multiply(Xj);

                        BigInteger Xi = coords[i - 1][0];
                        den = den.multiply((Xj.subtract(Xi)));
                    }
                }
                BigInteger Yi = coords[i - 1][1];
                in = (Yi.multiply(num)).divide(den);

                hpwdd = hpwdd.add(in);

            }
            hpwdd = hpwdd.mod(prime);

            System.out.println("Recalculated pwd :" + hpwdd);

            String encHistContent = FileUtils.readFileToString(histFile);
            System.out.println("encHistContent" + encHistContent);

            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(hpwdd.toByteArray());
            byte[] aesKey = md.digest();
            //  System.out.println("AES Key Size:" + aesKey.length + aesKey.toString());


            String histFileContent = AES.decrypt(encHistContent, aesKey);
            System.out.println("History File Content : " + histFileContent);


            histFileContent = histFileContent.replaceAll("#", "");
            System.out.println("Hist after rem padding" + histFileContent);
            String[] histContArr = histFileContent.split("Hash Value :");
            String histcontent = histContArr[0];
            System.out.print("histcontent" + histcontent);
            BigInteger histcontentHashVal = KeyedHash.calculateKeyedHash(histcontent.getBytes(), password);
            String histcontentHashString = new String(histcontentHashVal.toByteArray());
            System.out.println("histcontentHashVal" + histcontentHashString);
            String hashString = histContArr[1];
            System.out.println("file hash string" + hashString);

            if (hashString.equals(histcontentHashString)) {
                System.out.println("Hash values match!");
                //not enough successful logins to make decisions on alpha and beta
                if (Integer.parseInt(histcontent.split("\n")[0].split(",")[0]) == -1) {
                    updateInstructionNormal(instructFile);
                    //update the history file here as well
                } else {
                    String[][] history = new String[5][];
                    int mean1 = 0;
                    int mean2 = 0;
                    int mean3 = 0;
                    int mean4 = 0;
                    int mean5 = 0;
                    int deviation1 = 0;
                    int deviation2 = 0;
                    int deviation3 = 0;
                    int deviation4 = 0;
                    int deviation5 = 0;
                    for (int j = 0; j < 5; j++) {
                        //need to put a check here to make sure that all the values are from successful logins
                        history[j] = histcontent.split("\n")[j].split(",");
                        mean1 += Integer.parseInt(history[j][0]);
                        mean2 += Integer.parseInt(history[j][1]);
                        mean3 += Integer.parseInt(history[j][2]);
                        mean4 += Integer.parseInt(history[j][3]);
                        mean5 += Integer.parseInt(history[j][4]);
                        System.out.println("history: " + Arrays.toString(history[j]));//debug line
                    }
                    mean1 = mean1 / 5;
                    mean2 = mean2 / 5;
                    mean3 = mean3 / 5;
                    mean4 = mean4 / 5;
                    mean5 = mean5 / 5;
                    //calc std deviation
                    for (int j = 0; j < 5; ++j) {
                        deviation1 += (int) Math.pow(Integer.parseInt(history[j][0]) - mean1, 2);
                        deviation2 += (int) Math.pow(Integer.parseInt(history[j][1]) - mean1, 2);
                        deviation3 += (int) Math.pow(Integer.parseInt(history[j][2]) - mean1, 2);
                        deviation4 += (int) Math.pow(Integer.parseInt(history[j][3]) - mean1, 2);
                        deviation5 += (int) Math.pow(Integer.parseInt(history[j][4]) - mean1, 2);
                    }
                    deviation1 = (int) Math.sqrt(deviation1 / mean1);
                    deviation2 = (int) Math.sqrt(deviation2 / mean2);
                    deviation3 = (int) Math.sqrt(deviation3 / mean3);
                    deviation4 = (int) Math.sqrt(deviation4 / mean4);
                    deviation5 = (int) Math.sqrt(deviation5 / mean5);

                    int caseTypes[] = new int[5];
                    //case 1 is good alpha
                    //case 2 is good beta
                    //case 3 is both good
                    if (mean1 - deviation1 < q1Thresh) {
                        caseTypes[0] = 1;
                    } else if (mean1 + deviation1 > q1Thresh) {
                        caseTypes[0] = 2;
                    } else {
                        caseTypes[0] = 3;
                    }
                    if (mean2 - deviation2 < q2Thresh) {
                        caseTypes[1] = 1;
                    } else if (mean2 + deviation2 > q2Thresh) {
                        caseTypes[1] = 2;
                    } else {
                        caseTypes[1] = 3;
                    }
                    if (mean3 - deviation3 < q3Thresh) {
                        caseTypes[2] = 1;
                    } else if (mean3 + deviation3 > q3Thresh) {
                        caseTypes[2] = 2;
                    } else {
                        caseTypes[2] = 3;
                    }
                    if (mean4 - deviation4 < q4Thresh) {
                        caseTypes[3] = 1;
                    } else if (mean4 + deviation4 > q4Thresh) {
                        caseTypes[3] = 2;
                    } else {
                        caseTypes[3] = 3;
                    }
                    if (mean5 - deviation5 < q5Thresh) {
                        caseTypes[4] = 1;
                    } else if (mean5 + deviation5 > q5Thresh) {
                        caseTypes[4] = 2;
                    } else {
                        caseTypes[4] = 3;
                    }
                    updateInstructionAdjusted(histFile, caseTypes);
                }
            }

        } catch (SignatureException ex) {
            java.util.logging.Logger.getLogger(passwordGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(passwordGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(passwordGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(passwordGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_questionsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(passwordGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(passwordGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(passwordGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(passwordGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new passwordGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField campusTextField;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField exerciseTextField;
    private javax.swing.JTextField facebookTextField;
    private javax.swing.JPanel failPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton questionsButton;
    private javax.swing.JPanel questionsPanel;
    private javax.swing.JTextField sessionTextField;
    private javax.swing.JPanel successPanel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

    private void initialization(File histFileHash, File instructFileHash) {
        Random randQ = new SecureRandom();
        BigInteger q = prime;
        //     System.out.println("Value for q is :" + q);
        BigInteger hpwd = getHPassword(q);
        System.out.println("Value for hpwd :" + hpwd);

        String password = new String(passwordTextField.getPassword());
        /*        String password = "test";*/
        int m = 5; // No of features
        BigInteger[] coeffArr = generateRandCoeffs(m);
        coeffArr[0] = hpwd;

        //create instruction file
        HashMap<Integer, ArrayList<Point>> XYValuesMap = generateXYValues(coeffArr, m);
        Iterator iter = XYValuesMap.keySet().iterator();
        String instnfileContent = new String();
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(instructFileHash));
            while (iter.hasNext()) {

                Integer i = (Integer) iter.next();

                ArrayList<Point> pointList = (ArrayList<Point>) XYValuesMap.get(i);

                byte[] alphaData = BigInteger.valueOf(2 * i).toByteArray();
                BigInteger keyedHashValAlpha = ((KeyedHash.calculateKeyedHash(alphaData, password)).mod(q.subtract(BigInteger.ONE)).add(BigInteger.ONE));
                BigInteger alphaValue = (pointList.get(0).getY().multiply(keyedHashValAlpha)).mod(q);

                System.out.println("X Val ::" + pointList.get(0).getX());
                System.out.println("Y Val ::" + pointList.get(0).getY());
                BigInteger modGPM = keyedHashValAlpha.modInverse(q);
                System.out.println("Y Val GPM ::" + alphaValue.multiply(modGPM).mod(q));
                byte[] betaData = BigInteger.valueOf(2 * i + 1).toByteArray();
                BigInteger keyedHashValBeta = (KeyedHash.calculateKeyedHash(betaData, password)).mod(q);
                BigInteger betaValue = (pointList.get(1).getY().multiply(keyedHashValBeta)).mod(q);


                String contentRow = i + "," + alphaValue + "," + betaValue + "\n";
                instnfileContent += contentRow;
            }
            MessageDigest mdInstn = MessageDigest.getInstance("SHA-256");
            mdInstn.update(password.getBytes());
            byte[] aesInstnKey = mdInstn.digest();
            System.out.println("AES Key Size:" + aesInstnKey.length + aesInstnKey.toString());

            String encryptedVal = AES.encrypt(instnfileContent, aesInstnKey);
            bw.write(encryptedVal);
            bw.close();


            // Creation of history file
            int h = 20; // Num of max past logins
            int maxHistorySize = 3200; // 2000 Bytes
            String initialFeatureVals = "-1,-1,-1,-1,-1";
            String fileContent = "";
            for (int i = 1; i < 20; i++) {
                fileContent += initialFeatureVals + "\n";
            }

            try {
                BigInteger contentHashVal = KeyedHash.calculateKeyedHash(fileContent.getBytes(), password);
                String contentHashString = new String(contentHashVal.toByteArray());

                int mesgLength = fileContent.getBytes().length + contentHashString.getBytes().length;
                System.out.println("Hash String Length" + contentHashString.getBytes().length);

                //     System.out.println("Content size is:" + mesgLength);

                int cipherLen = (mesgLength / 16 + 1) * 16;

                int padLength = ((maxHistorySize) * (mesgLength)) / cipherLen - cipherLen;
                //  System.out.println("Padlength :" + padLength);
                for (int i = 0; i < padLength - 1; i++) {
                    fileContent += '#';
                }

                fileContent += "Hash Value :";

                fileContent += contentHashString;
                /* System.out.println("File content length :" + fileContent.getBytes().length);
                 System.out.println(fileContent);

                 System.out.println("Padlength :" + padLength + "\n");
                 System.out.println("Cipher Length :" + cipherLen);
                 */                // Generate the AES 256 bit key

                MessageDigest md = MessageDigest.getInstance("SHA-256");
                md.update(hpwd.toByteArray());
                byte[] aesKey = md.digest();
                //  System.out.println("AES Key Size:" + aesKey.length + aesKey.toString());

                String encryptedVal1 = AES.encrypt(fileContent, aesKey);
                // System.out.println("Encrypted file content :" + encryptedVal + "\n Enc File Size :" + new BASE64Decoder().decodeBuffer(encryptedVal).length);

                // Output to history file
                PrintWriter out = new PrintWriter(new FileWriter(histFileHash));
                out.print(encryptedVal1);

                out.close();
                String decryptedVal = AES.decrypt(encryptedVal1, aesKey);
                System.out.println("Decrypted String : " + decryptedVal);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            loginPanel.setVisible(false);
            successPanel.setVisible(true);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private static HashMap<Integer, ArrayList<Point>> generateXYValues(BigInteger[] coeffArr, int m) {
        HashMap<Integer, ArrayList<Point>> XYValuesMap = new HashMap<Integer, ArrayList<Point>>();

        for (int i = 1; i <= m; i++) {
            Point firstVal = new Point(BigInteger.valueOf(2 * i), generateYVal(coeffArr, BigInteger.valueOf(2 * i)));
            Point secondVal = new Point(BigInteger.valueOf(2 * i + 1), generateYVal(coeffArr, BigInteger.valueOf(2 * i + 1)));

            ArrayList<Point> pointsList = new ArrayList<Point>();
            pointsList.add(firstVal);
            pointsList.add(secondVal);
            System.out.println("x: " + firstVal.getX());
            System.out.println("y: " + firstVal.getY());
            XYValuesMap.put(i, pointsList);
        }

        return XYValuesMap;
    }

    private static BigInteger generateYVal(BigInteger[] coeffArr, BigInteger xVal) {
        BigInteger yVal = BigInteger.ZERO;
        //  System.out.println("Coeff Array Length :" + coeffArr.length);
        for (int j = 0; j < coeffArr.length; j++) {
            yVal = yVal.add(coeffArr[j].multiply(xVal.pow(j)));
        }

        return yVal;
    }

    private static BigInteger[] generateRandCoeffs(int m) {
        // TODO Auto-generated method stub
        BigInteger[] returnArr = new BigInteger[m];
        Random randP = new SecureRandom();
        for (int i = 1; i < m; i++) {
            returnArr[i] = BigInteger.valueOf(randP.nextInt(100)); // Max value set to 100
            //  System.out.println("Coeff " + i + "::" + returnArr[i]);
        }
        return returnArr;
    }

    public static BigInteger getHPassword(BigInteger qVal) {
        Random rnd = new Random();
        do {
            BigInteger i = new BigInteger(qVal.bitLength(), rnd);
            if (i.compareTo(qVal) <= 0) {
                return i;
            }
        } while (true);

    }

    //value is the alpha/beta value
    //type specifies if it is alpha or beta
    //number specifies which feature number it is
    private BigInteger calcYCoord(BigInteger value, char type, int number) {
        String password = new String(passwordTextField.getPassword());
        //String password = "test";
        BigInteger q = prime;
        BigInteger yValue = BigInteger.valueOf(-1);

        try {
            if (type == 'a') {
                //System.out.println("a feature num , val " + number + "," + value);
                //System.out.println("q val" + q);
                byte[] alphaData = BigInteger.valueOf(2 * number).toByteArray();
                BigInteger keyedHashValAlpha = ((KeyedHash.calculateKeyedHash(alphaData, password)).mod(q.subtract(BigInteger.ONE)).add(BigInteger.ONE));
                //System.out.println("keyedHash: " + keyedHashValAlpha);
                BigInteger modGPM = keyedHashValAlpha.modInverse(q);
                //System.out.println("Y Val GPM ::" + value.multiply(modGPM).mod(q));
                yValue = value.multiply(modGPM).mod(q);

            } else {
                byte[] betaData = BigInteger.valueOf(2 * number + 1).toByteArray();
                BigInteger keyedHashValBeta = ((KeyedHash.calculateKeyedHash(betaData, password)).mod(q.subtract(BigInteger.ONE)).add(BigInteger.ONE));
                //System.out.println("keyedHash: " + keyedHashValBeta);
                BigInteger modGPM = keyedHashValBeta.modInverse(q);
                //System.out.println("Y Val GPM ::" + value.multiply(modGPM).mod(q));
                yValue = value.multiply(modGPM).mod(q);
            }
        } catch (SignatureException ex) {
            Logger.getLogger(passwordGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return yValue;
    }

    private void updateInstructionAdjusted(File instructFileHash, int[] caseTypes) {
        BigInteger q = prime;
        //     System.out.println("Value for q is :" + q);
        BigInteger hpwd = getHPassword(q);
        System.out.println("Value for hpwd :" + hpwd);

        String password = new String(passwordTextField.getPassword());
        /*        String password = "test";*/
        int m = 5; // No of features
        BigInteger[] coeffArr = generateRandCoeffs(m);
        coeffArr[0] = hpwd;

        //create instruction file
        HashMap<Integer, ArrayList<Point>> XYValuesMap = generateXYValues(coeffArr, m);
        Iterator iter = XYValuesMap.keySet().iterator();
        String instnfileContent = new String();
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(instructFileHash));
            while (iter.hasNext()) {

                Integer i = (Integer) iter.next();

                if (caseTypes[i] == 1) {
                    //good alpha bad beta
                    ArrayList<Point> pointList = (ArrayList<Point>) XYValuesMap.get(i);

                    byte[] alphaData = BigInteger.valueOf(2 * i).toByteArray();
                    BigInteger keyedHashValAlpha = ((KeyedHash.calculateKeyedHash(alphaData, password)).mod(q.subtract(BigInteger.ONE)).add(BigInteger.ONE));
                    BigInteger alphaValue = (pointList.get(0).getY().multiply(keyedHashValAlpha)).mod(q);

                    byte[] betaData = BigInteger.valueOf(2 * i + 1).toByteArray();
                    BigInteger keyedHashValBeta = (KeyedHash.calculateKeyedHash(betaData, password)).mod(q);
                    //purposely calculate beta incorrectly
                    BigInteger betaValue = (pointList.get(1).getY().multiply(keyedHashValBeta)).multiply(KeyedHash.calculateKeyedHash(betaData, password)).mod(q);

                    String contentRow = i + "," + alphaValue + "," + betaValue + "\n";
                    instnfileContent += contentRow;
                } else if (caseTypes[i] == 2) {
                    //good beta bad alpha
                    ArrayList<Point> pointList = (ArrayList<Point>) XYValuesMap.get(i);

                    byte[] alphaData = BigInteger.valueOf(2 * i).toByteArray();
                    BigInteger keyedHashValAlpha = ((KeyedHash.calculateKeyedHash(alphaData, password)).mod(q.subtract(BigInteger.ONE)).add(BigInteger.ONE));
                    //purposely calculate alpha incorrectly
                    BigInteger alphaValue = (pointList.get(0).getY().multiply(keyedHashValAlpha)).multiply(KeyedHash.calculateKeyedHash(alphaData, password)).mod(q);

                    byte[] betaData = BigInteger.valueOf(2 * i + 1).toByteArray();
                    BigInteger keyedHashValBeta = (KeyedHash.calculateKeyedHash(betaData, password)).mod(q);
                    BigInteger betaValue = (pointList.get(1).getY().multiply(keyedHashValBeta)).mod(q);

                    String contentRow = i + "," + alphaValue + "," + betaValue + "\n";
                    instnfileContent += contentRow;
                } else {

                    ArrayList<Point> pointList = (ArrayList<Point>) XYValuesMap.get(i);

                    byte[] alphaData = BigInteger.valueOf(2 * i).toByteArray();
                    BigInteger keyedHashValAlpha = ((KeyedHash.calculateKeyedHash(alphaData, password)).mod(q.subtract(BigInteger.ONE)).add(BigInteger.ONE));
                    BigInteger alphaValue = (pointList.get(0).getY().multiply(keyedHashValAlpha)).mod(q);

                    byte[] betaData = BigInteger.valueOf(2 * i + 1).toByteArray();
                    BigInteger keyedHashValBeta = (KeyedHash.calculateKeyedHash(betaData, password)).mod(q);
                    BigInteger betaValue = (pointList.get(1).getY().multiply(keyedHashValBeta)).mod(q);

                    String contentRow = i + "," + alphaValue + "," + betaValue + "\n";
                    instnfileContent += contentRow;
                }
            }
            MessageDigest mdInstn = MessageDigest.getInstance("SHA-256");
            mdInstn.update(password.getBytes());
            byte[] aesInstnKey = mdInstn.digest();
            System.out.println("AES Key Size:" + aesInstnKey.length + aesInstnKey.toString());

            String encryptedVal = AES.encrypt(instnfileContent, aesInstnKey);
            bw.write(encryptedVal);
            bw.close();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private void updateInstructionNormal(File instructFileHash) {
        BigInteger q = prime;
        //     System.out.println("Value for q is :" + q);
        BigInteger hpwd = getHPassword(q);
        System.out.println("Value for hpwd :" + hpwd);

        String password = new String(passwordTextField.getPassword());
        /*        String password = "test";*/
        int m = 5; // No of features
        BigInteger[] coeffArr = generateRandCoeffs(m);
        coeffArr[0] = hpwd;

        //create instruction file
        HashMap<Integer, ArrayList<Point>> XYValuesMap = generateXYValues(coeffArr, m);
        Iterator iter = XYValuesMap.keySet().iterator();
        String instnfileContent = new String();
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(instructFileHash));
            while (iter.hasNext()) {

                Integer i = (Integer) iter.next();

                ArrayList<Point> pointList = (ArrayList<Point>) XYValuesMap.get(i);

                byte[] alphaData = BigInteger.valueOf(2 * i).toByteArray();
                BigInteger keyedHashValAlpha = ((KeyedHash.calculateKeyedHash(alphaData, password)).mod(q.subtract(BigInteger.ONE)).add(BigInteger.ONE));
                BigInteger alphaValue = (pointList.get(0).getY().multiply(keyedHashValAlpha)).mod(q);

                System.out.println("X Val ::" + pointList.get(0).getX());
                System.out.println("Y Val ::" + pointList.get(0).getY());
                BigInteger modGPM = keyedHashValAlpha.modInverse(q);
                System.out.println("Y Val GPM ::" + alphaValue.multiply(modGPM).mod(q));
                byte[] betaData = BigInteger.valueOf(2 * i + 1).toByteArray();
                BigInteger keyedHashValBeta = (KeyedHash.calculateKeyedHash(betaData, password)).mod(q);
                BigInteger betaValue = (pointList.get(1).getY().multiply(keyedHashValBeta)).mod(q);


                String contentRow = i + "," + alphaValue + "," + betaValue + "\n";
                instnfileContent += contentRow;
            }
            MessageDigest mdInstn = MessageDigest.getInstance("SHA-256");
            mdInstn.update(password.getBytes());
            byte[] aesInstnKey = mdInstn.digest();
            System.out.println("AES Key Size:" + aesInstnKey.length + aesInstnKey.toString());

            String encryptedVal = AES.encrypt(instnfileContent, aesInstnKey);
            bw.write(encryptedVal);
            bw.close();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}
